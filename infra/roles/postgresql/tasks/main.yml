---
- name: Install required packages
  apt:
    name:
      - wget
      - ca-certificates
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Add PostgreSQL APT repository key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add PostgreSQL APT repository
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
    state: present
    update_cache: yes

- name: Install PostgreSQL
  apt:
    name:
      - "postgresql-{{ postgresql_version }}"
      - "postgresql-client-{{ postgresql_version }}"
      - "postgresql-contrib-{{ postgresql_version }}"
      - python3-psycopg2
    state: present
    update_cache: yes

- name: Start and enable PostgreSQL (initial start)
  systemd:
    name: postgresql
    state: started
    enabled: yes

- name: Check if PostgreSQL cluster is initialized
  stat:
    path: "/var/lib/postgresql/{{ postgresql_version }}/main/PG_VERSION"
  register: pg_initialized

- name: Initialize PostgreSQL cluster if needed
  command: "/usr/lib/postgresql/{{ postgresql_version }}/bin/initdb -D /var/lib/postgresql/{{ postgresql_version }}/main --locale=en_US.UTF-8"
  become_user: postgres
  when: not pg_initialized.stat.exists

- name: Ensure PostgreSQL data directory permissions
  file:
    path: "/var/lib/postgresql/{{ postgresql_version }}/main"
    owner: postgres
    group: postgres
    mode: '0700'
    state: directory

- name: Configure PostgreSQL
  template:
    src: postgresql.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0644'
    backup: yes
  notify: restart postgresql

- name: Configure PostgreSQL authentication (initial - peer auth for postgres)
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0640'
    backup: yes
  notify: restart postgresql

- name: Wait for PostgreSQL to be ready
  wait_for:
    port: "{{ postgresql_port }}"
    host: localhost
    delay: 5
    timeout: 30

- name: Set postgres user password
  postgresql_user:
    name: postgres
    password: "{{ postgresql_postgres_password }}"
    encrypted: yes
    login_user: postgres
  become_user: postgres
  ignore_errors: yes

- name: Configure PostgreSQL authentication (secure - password auth for postgres)
  template:
    src: pg_hba_secure.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0640'
    backup: yes
  notify: restart postgresql

- name: Create application database
  postgresql_db:
    name: "{{ postgresql_database }}"
    state: present
    login_user: postgres
    login_password: "{{ postgresql_postgres_password }}"
    login_host: localhost

- name: Install useful PostgreSQL extensions
  postgresql_ext:
    name: "{{ item }}"
    db: "{{ postgresql_database }}"
    state: present
    login_user: postgres
    login_password: "{{ postgresql_postgres_password }}"
    login_host: localhost
  loop:
    - pg_stat_statements
    - pgcrypto
    - uuid-ossp
  ignore_errors: yes  # Some extensions might not be available

- name: Create indexes and optimizations script
  copy:
    content: |
      #!/bin/bash
      # PostgreSQL optimization script
      
      # Analyze all databases
      sudo -u postgres psql -c "ANALYZE;"
      
      # Update statistics
      sudo -u postgres psql -c "SELECT pg_stat_reset();"
      
      echo "PostgreSQL optimization completed"
    dest: /usr/local/bin/pg-optimize.sh
    mode: '0755'

# Data loading tasks
- name: Create data directory
  file:
    path: "{{ postgresql_data_dir }}"
    state: directory
    mode: '0755'
  when: postgresql_load_data

- name: tables sql file
  template:
    src: "tables.sql"
    dest: "{{ postgresql_data_dir }}/tables.sql"
  when: postgresql_load_data

- name: Create tables
  postgresql_db:
    name: "{{ postgresql_database }}"
    state: restore
    target: "{{ postgresql_data_dir }}/tables.sql"
    login_user: postgres
    login_password: "{{ postgresql_postgres_password }}"
    login_host: localhost
  when: postgresql_load_data

- name: Download users.sql
  get_url:
    url: "{{ postgresql_data_sources.users_sql }}"
    dest: "{{ postgresql_data_dir }}/users.sql"
    mode: '0644'
  when: postgresql_load_data

# - name: Download events.sql
#   get_url:
#     url: "{{ postgresql_data_sources.events_sql }}"
#     dest: "{{ postgresql_data_dir }}/events.sql"
#     mode: '0644'
#   when: postgresql_load_data

# - name: Download events_archive.sql.zip
#   get_url:
#     url: "{{ postgresql_data_sources.events_archive_zip }}"
#     dest: "{{ postgresql_data_dir }}/events_archive.sql.zip"
#     mode: '0644'
#   when: postgresql_load_data

# - name: Install unzip for extracting archive
#   apt:
#     name: unzip
#     state: present
#   when: postgresql_load_data

# - name: Extract events_archive.sql.zip
#   unarchive:
#     src: "{{ postgresql_data_dir }}/events_archive.sql.zip"
#     dest: "{{ postgresql_data_dir }}"
#     remote_src: yes
#     creates: "{{ postgresql_data_dir }}/events_archive.sql"
#   when: postgresql_load_data

- name: Load users.sql data
  postgresql_db:
    name: "{{ postgresql_database }}"
    state: restore
    target: "{{ postgresql_data_dir }}/users.sql"
    login_user: postgres
    login_password: "{{ postgresql_postgres_password }}"
    login_host: localhost
  when: postgresql_load_data

# - name: Load events.sql data
#   postgresql_db:
#     name: "{{ postgresql_database }}"
#     state: restore
#     target: "{{ postgresql_data_dir }}/events.sql"
#     login_user: postgres
#     login_password: "{{ postgresql_postgres_password }}"
#     login_host: localhost
#   when: postgresql_load_data

# - name: Load events_archive.sql data
#   postgresql_db:
#     name: "{{ postgresql_database }}"
#     state: restore
#     target: "{{ postgresql_data_dir }}/events_archive.sql"
#     login_user: postgres
#     login_password: "{{ postgresql_postgres_password }}"
#     login_host: localhost
#   when: postgresql_load_data

- name: Clean up downloaded files
  file:
    path: "{{ postgresql_data_dir }}"
    state: absent
  when: postgresql_load_data
