---
- name: Install required packages
  apt:
    name:
      - wget
      - ca-certificates
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Add PostgreSQL APT repository key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add PostgreSQL APT repository
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
    state: present
    update_cache: yes

- name: Install PostgreSQL
  apt:
    name:
      - "postgresql-{{ postgresql_version }}"
      - "postgresql-client-{{ postgresql_version }}"
      - "postgresql-contrib-{{ postgresql_version }}"
      - python3-psycopg2
    state: present
    update_cache: yes

- name: Start and enable PostgreSQL
  systemd:
    name: postgresql
    state: started
    enabled: yes

- name: Configure PostgreSQL
  template:
    src: postgresql.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0644'
    backup: yes
  notify: restart postgresql

- name: Configure PostgreSQL authentication
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0640'
    backup: yes
  notify: restart postgresql

- name: Restart PostgreSQL to apply configuration
  systemd:
    name: postgresql
    state: restarted

- name: Create application database
  postgresql_db:
    name: "{{ postgresql_database }}"
    state: present
  become_user: postgres

- name: Create application user
  postgresql_user:
    name: "{{ postgresql_user }}"
    password: "{{ postgresql_password }}"
    priv: "{{ postgresql_database }}:ALL"
    state: present
  become_user: postgres

- name: Grant privileges on database
  postgresql_privs:
    database: "{{ postgresql_database }}"
    roles: "{{ postgresql_user }}"
    privs: ALL
    type: database
    state: present
  become_user: postgres

- name: Install useful PostgreSQL extensions
  postgresql_ext:
    name: "{{ item }}"
    db: "{{ postgresql_database }}"
    state: present
  become_user: postgres
  loop:
    - pg_stat_statements
    - pgcrypto
    - uuid-ossp
  ignore_errors: yes  # Some extensions might not be available

- name: Create indexes and optimizations script
  copy:
    content: |
      #!/bin/bash
      # PostgreSQL optimization script
      
      # Analyze all databases
      sudo -u postgres psql -c "ANALYZE;"
      
      # Update statistics
      sudo -u postgres psql -c "SELECT pg_stat_reset();"
      
      echo "PostgreSQL optimization completed"
    dest: /usr/local/bin/pg-optimize.sh
    mode: '0755'

- name: Setup logrotate for PostgreSQL
  copy:
    content: |
      /var/log/postgresql/*.log {
          daily
          missingok
          rotate 52
          compress
          delaycompress
          notifempty
          create 0640 postgres postgres
          sharedscripts
          postrotate
              /usr/bin/killall -HUP rsyslog 2> /dev/null || true
          endscript
      }
    dest: /etc/logrotate.d/postgresql
    mode: '0644'