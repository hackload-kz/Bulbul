---
- name: Install required packages
  apt:
    name:
      - wget
      - ca-certificates
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Add PostgreSQL APT repository key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add PostgreSQL APT repository
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
    state: present
    update_cache: yes

- name: Install PostgreSQL
  apt:
    name:
      - "postgresql-{{ postgresql_version }}"
      - "postgresql-client-{{ postgresql_version }}"
      - "postgresql-contrib-{{ postgresql_version }}"
      - python3-psycopg2
    state: present
    update_cache: yes

- name: Start and enable PostgreSQL
  systemd:
    name: postgresql
    state: started
    enabled: yes

- name: Configure PostgreSQL
  template:
    src: postgresql.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0644'
    backup: yes
  notify: restart postgresql

- name: Configure PostgreSQL authentication
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0640'
    backup: yes
  notify: restart postgresql

- name: Restart PostgreSQL to apply configuration
  systemd:
    name: postgresql
    state: restarted

- name: Set password for postgres superuser
  postgresql_user:
    name: postgres
    password: "{{ postgresql_postgres_password }}"
    encrypted: yes
    state: present
  become_user: postgres

- name: Create application database
  postgresql_db:
    name: "{{ postgresql_database }}"
    state: present
  become_user: postgres

- name: Create application user
  postgresql_user:
    name: "{{ postgresql_user }}"
    password: "{{ postgresql_password }}"
    priv: "{{ postgresql_database }}:ALL"
    state: present
  become_user: postgres

- name: Grant privileges on database
  postgresql_privs:
    database: "{{ postgresql_database }}"
    roles: "{{ postgresql_user }}"
    privs: ALL
    type: database
    state: present
  become_user: postgres

- name: Install useful PostgreSQL extensions
  postgresql_ext:
    name: "{{ item }}"
    db: "{{ postgresql_database }}"
    state: present
  become_user: postgres
  loop:
    - pg_stat_statements
    - pgcrypto
    - uuid-ossp
  ignore_errors: yes  # Some extensions might not be available

- name: Create schemas
  postgresql_schema:
    database: "{{ postgresql_database }}"
    name: "{{ item }}"
    state: present
  become_user: postgres
  loop:
    - users
    - events_archive

- name: Grant schema privileges to application user
  postgresql_privs:
    database: "{{ postgresql_database }}"
    roles: "{{ postgresql_user }}"
    privs: ALL
    type: schema
    objs: "{{ item }}"
    state: present
  become_user: postgres
  loop:
    - users
    - events_archive

- name: Create indexes and optimizations script
  copy:
    content: |
      #!/bin/bash
      # PostgreSQL optimization script
      
      # Analyze all databases
      sudo -u postgres psql -c "ANALYZE;"
      
      # Update statistics
      sudo -u postgres psql -c "SELECT pg_stat_reset();"
      
      echo "PostgreSQL optimization completed"
    dest: /usr/local/bin/pg-optimize.sh
    mode: '0755'

- name: Setup logrotate for PostgreSQL
  copy:
    content: |
      /var/log/postgresql/*.log {
          daily
          missingok
          rotate 52
          compress
          delaycompress
          notifempty
          create 0640 postgres postgres
          sharedscripts
          postrotate
              /usr/bin/killall -HUP rsyslog 2> /dev/null || true
          endscript
      }
    dest: /etc/logrotate.d/postgresql
    mode: '0644'

# Data loading tasks
- name: Create data directory
  file:
    path: "{{ postgresql_data_dir }}"
    state: directory
    mode: '0755'
  when: postgresql_load_data

- name: Download users.sql
  get_url:
    url: "{{ postgresql_data_sources.users_sql }}"
    dest: "{{ postgresql_data_dir }}/users.sql"
    mode: '0644'
  when: postgresql_load_data

- name: Download events.sql
  get_url:
    url: "{{ postgresql_data_sources.events_sql }}"
    dest: "{{ postgresql_data_dir }}/events.sql"
    mode: '0644'
  when: postgresql_load_data

- name: Download events_archive.sql.zip
  get_url:
    url: "{{ postgresql_data_sources.events_archive_zip }}"
    dest: "{{ postgresql_data_dir }}/events_archive.sql.zip"
    mode: '0644'
  when: postgresql_load_data

- name: Install unzip for extracting archive
  apt:
    name: unzip
    state: present
  when: postgresql_load_data

- name: Extract events_archive.sql.zip
  unarchive:
    src: "{{ postgresql_data_dir }}/events_archive.sql.zip"
    dest: "{{ postgresql_data_dir }}"
    remote_src: yes
    creates: "{{ postgresql_data_dir }}/events_archive.sql"
  when: postgresql_load_data

- name: Check if users table exists
  postgresql_query:
    db: "{{ postgresql_database }}"
    query: "SELECT to_regclass('public.users')"
  become_user: postgres
  register: users_table_check
  when: postgresql_load_data

- name: Load users.sql data
  postgresql_db:
    name: "{{ postgresql_database }}"
    state: restore
    target: "{{ postgresql_data_dir }}/users.sql"
  become_user: postgres
  when: postgresql_load_data and users_table_check.query_result[0][0] is none

- name: Check if events_archive table exists
  postgresql_query:
    db: "{{ postgresql_database }}"
    query: "SELECT to_regclass('public.events_archive')"
  become_user: postgres
  register: events_table_check
  when: postgresql_load_data

- name: Load events.sql data
  postgresql_db:
    name: "{{ postgresql_database }}"
    state: restore
    target: "{{ postgresql_data_dir }}/events.sql"
  become_user: postgres
  when: postgresql_load_data and events_table_check.query_result[0][0] is none

- name: Load events_archive.sql data
  postgresql_db:
    name: "{{ postgresql_database }}"
    state: restore
    target: "{{ postgresql_data_dir }}/events_archive.sql"
  become_user: postgres
  when: postgresql_load_data and events_table_check.query_result[0][0] is none

- name: Clean up downloaded files
  file:
    path: "{{ postgresql_data_dir }}"
    state: absent
  when: postgresql_load_data