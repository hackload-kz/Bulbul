---
- name: Update apt cache
  apt:
    update_cache: yes

- name: Install required packages
  apt:
    name:
      - wget
      - tar
      - curl
    state: present

- name: Create node_exporter group
  group:
    name: "{{ node_exporter_group }}"
    state: present

- name: Create node_exporter user
  user:
    name: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    system: yes
    shell: /bin/false
    home: "{{ node_exporter_data_dir }}"
    createhome: no

- name: Create node_exporter directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: '0755'
  loop:
    - "{{ node_exporter_config_dir }}"
    - "{{ node_exporter_data_dir }}"
    - "{{ node_exporter_textfile_dir }}"

- name: Check if node_exporter is already installed
  stat:
    path: "{{ node_exporter_bin_dir }}/node_exporter"
  register: node_exporter_binary

- name: Get installed node_exporter version
  shell: "{{ node_exporter_bin_dir }}/node_exporter --version | head -n1 | cut -d' ' -f3"
  register: installed_version
  when: node_exporter_binary.stat.exists
  changed_when: false
  ignore_errors: yes

- name: Download and install node_exporter
  block:
    - name: Download node_exporter
      get_url:
        url: "{{ node_exporter_download_url }}"
        dest: "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"
        mode: '0644'

    - name: Extract node_exporter
      unarchive:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"
        dest: "/tmp"
        remote_src: yes
        creates: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64"

    - name: Copy node_exporter binary
      copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
        dest: "{{ node_exporter_bin_dir }}/node_exporter"
        owner: root
        group: root
        mode: '0755'
        remote_src: yes
      notify: restart node_exporter

    - name: Clean up downloaded files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"
        - "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64"

  when: >
    not node_exporter_binary.stat.exists or
    (installed_version.stdout is defined and installed_version.stdout != node_exporter_version)

- name: Create node_exporter systemd service
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    mode: '0644'
  notify: restart node_exporter

- name: Allow node_exporter port in firewall
  ufw:
    rule: allow
    port: "{{ node_exporter_port }}"
    proto: tcp
    comment: "Node Exporter"

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

- name: Enable and start node_exporter
  systemd:
    name: node_exporter
    enabled: yes
    state: started