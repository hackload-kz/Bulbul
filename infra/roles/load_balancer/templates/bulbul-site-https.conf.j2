# Upstream backend servers
upstream backend {
    least_conn;
{% for host in groups['api_servers'] %}
    server {{ hostvars[host]['ansible_host'] }}:8081 max_fails=0;
{% endfor %}
    keepalive 256;
}

# HTTP server
server {
    listen 80;
    server_name {{ domain_name }};

    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files $uri =404;
    }

    # Proxy configuration for API requests
    location / {
        if ($http_user_agent = "HackLoad-Monitor/1.0") {
            add_header Content-Type application/json;
            return 200 '[]';
        }
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_next_upstream           error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries     2;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_send_timeout 300s;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name {{ domain_name }};

    # SSL certificates (using consistent symlink)
    ssl_certificate /etc/letsencrypt/live/{{ domain_name }}-current/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}-current/privkey.pem;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Proxy configuration
    location / {
        if ($http_user_agent = "HackLoad-Monitor/1.0") {
            add_header Content-Type application/json;
            return 200 '[]';
        }
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_next_upstream           error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries     2;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_send_timeout 300s;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}